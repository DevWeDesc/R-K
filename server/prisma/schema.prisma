generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  Admin
  Veterinarian
}

model UsersLogin {
  id            Int            @id @unique @default(autoincrement())
  password      String
  roleUser      UserRole
  veterinarians Veterinarians?
}

model Veterinarians {
  id                Int             @id @unique @default(autoincrement())
  name              String
  crmv              String          @unique
  email             String          @unique
  state             String
  phone             String
  veterinarianLogin UsersLogin      @relation(fields: [usersLoginId], references: [id])
  usersLoginId      Int             @unique
  solicitations     Solicitations[]
}

model Customers {
  id    Int    @id @default(autoincrement())
  name  String
  email String @unique
  phone String @unique
  pets  Pets[]
}

enum SpecieEnum {
  Canino
  Felino
  CaninaAndFelino
}

enum SexEnum {
  Macho
  Femea
}

model Pets {
  id            Int             @id @default(autoincrement())
  name          String
  age           String
  sex           SexEnum
  specie        SpecieEnum
  customer      Customers       @relation(fields: [customerId], references: [id])
  customerId    Int
  Solicitations Solicitations[]
}

enum ExamTypeEnum {
  HEMATOLOGIA
  BIOQUIMICA_CLINICA
  IMUNOLOGIA
  URINA
  FEZES
  MICROBIOLOGIA
  HORMONIOS
  PATOLOGIA
  PATOLOGIA_SEGUNDA_PARTE
  BIOLOGIA_MOLECULAR
  CARDIOLOGIA
  ULTRASSONOGRAFIA
  DERMATOLOGIA
  NOT_DEFINED
}

model Exams {
  id                        Int                         @id @default(autoincrement())
  idOld                     Int?                        @unique
  name                      String                      @unique
  value                     Float
  valueWithRate             Float?
  isHighligth               Boolean                     @default(false)
  preparing                 String?
  deadline                  String
  specie                    String
  typeExam                  ExamTypeEnum
  ExamsInPetOnSolicitations ExamsInPetOnSolicitations[]
  ExamsInExamProfile        ExamsInExamProfile[]
  group                     Groups?                     @relation(fields: [groupsId], references: [id])
  groupsId                  Int?
}

model ExamsInExamProfile {
  id             String        @id @default(uuid())
  examsId        Int?
  Exams          Exams?        @relation(fields: [examsId], references: [id])
  examsProfileId String?
  ExamsProfile   ExamsProfile? @relation(fields: [examsProfileId], references: [id])

  @@unique([examsId, examsProfileId])
}

model ExamsProfile {
  id                         String                       @id @default(uuid())
  name                       String                       @unique
  examsInExamProfile         ExamsInExamProfile[]
  ExamsProfileInSolicitation ExamsProfileInSolicitation[]
}

model ExamsProfileInSolicitation {
  id              String         @id @default(uuid())
  ExamsProfile    ExamsProfile?  @relation(fields: [examProfileId], references: [id])
  examProfileId   String?
  Solicitations   Solicitations? @relation(fields: [solicitationsId], references: [id])
  solicitationsId String?
}

enum TypeOfRadiologySection {
  Skull
  Skull_Dental_Arch
  Members
  Pelvic_Limb
  Abdomen
  Chest
  Spine
  Projections
  Cervical_Region
}

model RadiologySections {
  id                        Int                      @id @default(autoincrement())
  radiologyInSolicitation   RadiologyInSolicitation? @relation(fields: [radiologyInSolicitationId], references: [id])
  radiologyInSolicitationId String?
  typeOfRadiologySection    TypeOfRadiologySection
  sedated                   Boolean?
  clinicalSuspicion         String?
  region                    String[]
  side                      String[]
  articulation              String[]
  observation               String?
}

model RadiologyInSolicitation {
  id                String              @id @default(uuid())
  solicitation      Solicitations       @relation(fields: [solicitationId], references: [id])
  solicitationId    String              @unique
  radiologySections RadiologySections[]
}

model Groups {
  id    Int     @id @default(autoincrement())
  name  String
  exams Exams[]
}

model ExamsInPetOnSolicitations {
  id              Int            @id @default(autoincrement())
  Exams           Exams?         @relation(fields: [examsId], references: [id])
  examsId         Int?
  Solicitations   Solicitations? @relation(fields: [solicitationsId], references: [id])
  solicitationsId String?
}

model Solicitations {
  id                      String                       @id @default(uuid())
  slug                    String?
  bodyAnimalImage         String?                      @default("")
  isFinished              Boolean                      @default(false)
  exams                   ExamsInPetOnSolicitations[]
  createdIn               DateTime                     @default(now())
  finishedIn              DateTime?
  observation             String?
  veterinariansId         Int
  veterinarians           Veterinarians                @relation(fields: [veterinariansId], references: [id])
  pet                     Pets                         @relation(fields: [petsId], references: [id])
  petsId                  Int
  examsProfiles           ExamsProfileInSolicitation[]
  radiologyInSolicitation RadiologyInSolicitation?
}
