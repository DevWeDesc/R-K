generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  Admin
  Veterinarian
}

model UsersLogin {
  id            Int            @id @unique @default(autoincrement())
  password      String
  roleUser      UserRole
  veterinarians Veterinarians?
}

model Veterinarians {
  id                Int             @id @unique @default(autoincrement())
  name              String
  crmv              String          @unique
  email             String          @unique
  state             String
  phone             String
  veterinarianLogin UsersLogin      @relation(fields: [usersLoginId], references: [id])
  usersLoginId      Int             @unique
  solicitations     Solicitations[]
}

model Customers {
  id    Int    @id @default(autoincrement())
  name  String
  email String @unique
  phone String @unique
  pets  Pets[]
}

enum SpecieEnum {
  Canina
  Felino
}

model Pets {
  id            Int             @id @default(autoincrement())
  name          String
  specie        SpecieEnum
  customer      Customers       @relation(fields: [customerId], references: [id])
  customerId    Int
  Solicitations Solicitations[]
}

model Exams {
  id                        Int                         @id @default(autoincrement())
  name                      String
  value                     Float
  group                     Groups?                     @relation(fields: [groupId], references: [id])
  groupId                   Int?
  ExamsInPetOnSolicitations ExamsInPetOnSolicitations[]
}

model Groups {
  id        Int     @id @default(autoincrement())
  name      String
  preparing Json
  exams     Exams[]
}

model ExamsInPetOnSolicitations {
  id              Int            @id @default(autoincrement())
  Exams           Exams?         @relation(fields: [examsId], references: [id])
  examsId         Int?
  Solicitations   Solicitations? @relation(fields: [solicitationsId], references: [id])
  solicitationsId String?
}

model Solicitations {
  id              String                      @id @default(uuid())
  isFinished      Boolean                     @default(false)
  exams           ExamsInPetOnSolicitations[]
  createdIn       DateTime                    @default(now())
  finishedIn      DateTime?
  observation     String?
  veterinariansId Int
  veterinarians   Veterinarians               @relation(fields: [veterinariansId], references: [id])
  pet             Pets                        @relation(fields: [petsId], references: [id])
  petsId          Int
}
